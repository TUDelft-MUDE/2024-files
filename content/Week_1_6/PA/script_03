## PA-6 Challenge 1

Now that we are familiar with numerical integration schemes we can apply these concepts to compute integrals that would be otherwise very difficult to compute (if even possible).

For example the integral :
For exmaple lets consider the following integral
$$\int^{10}_{0} \exp(-b x) + 2 \frac{1}{x - 10} + \frac{3 \sin(d x^2)} {\sqrt(ex)} + \frac{2 \cos(ex) x}{5} + x  \log(x) \, dx$$
with a,b,c,d,e being constant equal to 5,1,3,5,2 respectively.

The code snippet plots the function, computes the integral using the trapezoidal ans simpson integration schemes and compares them to each other.

Errors: 
1. Importing numpy as nup -> `NameError: name 'np' is not defined`
2. In  `func_to_integrate` the multiplication is not expressed with  the '*'symbol (2np.cos) -> `SyntaxError: invalid decimal literal`
3. In the same function, exponentiation is express as '^; -> `TypeError: ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe'`
4. The support of the log function is $)0,\inf($,  but the x_vector starts at zero->  A bunch of `RuntimeWarnings`
5. Similarly for x=10 we get runtime warning associated with (1/(x-10)), however, because we have x_limit=0.9 in the plot this asymptotic behavior is hidden in the plot.-> `RuntimeWarning`
6. When creating the figure we did not pass `figsize`, we simply pass the tuple with the size as argument -> `TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'`
7. In ylim we express multiplication as 'space' intstead of * -> `SyntaxError: invalid syntax. Perhaps you forgot a comma?`. if the `RuntimeWarnings` are not resolve denifing the limits in terms of the maximum y-value could cause `ValueError: Axis limits cannot be NaN or Inf`
8. In addition, we use y_data.max which is incorrect, either use `np.max()` or call the method `.max()`-> `TypeError: unsupported operand type(s) for *: 'int' and 'builtin_function_or_method'`
9. Finally the results of the numerical integration differ wildly for simps and trapz even though the discretization is small. In `simpson` we are not passing the x_vector but instead the dx directly, and this dx is supper different than the dx (implied) in the trapz implementation  by the x vector-> `Raise exception Result differ to much!`. Also, the discretization is two small for a function this 'rough' (not smooth at the current discretization level)-> `Raise Exception results are negative` (if we increase the discretization they converge to positive value)


Order in which they appear:
2->7->1->3->4,5->6->8-> 9


> Chatgpt could not fix all the error at once ( prompt: fix this <\code>)

# Correct code  

```python
import matplotlib.pyplot as plt
from scipy.integrate import simps, trapezoid

# Define a function to fit
def func_to_integrate(x, a, b, c, d, e):
    return a * np.exp(-b * x) + 2 * 1 / (x - 10) + c + 3 * np.sin(d * x**2) / np.sqrt(e * x) + 2 * np.cos(e * x) * x / 5 + x * np.log(x)

x_data = np.linspace(1e-4, 10 - 1e-4, 1000)
y_data = func_to_integrate(x_data, 5.0, 1.0, 3, 5, 2)

numerical_integral_trap = trapezoid(y_data, x_data)
numerical_integral_simp = simps(y_data, x_data)
print(f'Trapezoidal Integral: {numerical_integral_trap}')
print(f'Simpson Integral: {numerical_integral_simp}')

# Create a plot
plt.figure(figsize=(12, 6))
plt.plot(x_data, y_data, color='lightblue')
# Plotting properties
plt.title('Function to Integrate')
plt.xlabel('x')
plt.ylabel('y')
plt.grid()
plt.xlim(0, 9)
plt.ylim(-1, 1.5 * y_data.max())
plt.show()

if not (numerical_integral_trap - numerical_integral_simp) / numerical_integral_simp < 0.3:
    raise ValueError('The difference between the two methods is too high!')
if numerical_integral_simp < 0 and numerical_integral_trap < 0:
    raise ValueError('The results should be positive!')

     ```