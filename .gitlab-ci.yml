stages:
  - build
  - deploy
  - cleanup

variables:
  # Disable TLS as we're using the host's Docker socket
  DOCKER_TLS_CERTDIR: ""

build:
  stage: build
  image: docker:latest
  before_script:
    - docker info
    - docker-compose --version
  script:
    - docker-compose build
  tags:
    - deploy # Use this tag if you have a runner with access to Docker socket

deploy-to-archive:
  stage: deploy
  image: docker:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_COMMIT_BRANCH == "draft" && $CI_PIPELINE_SOURCE == "push"
  before_script:
    - apk add --no-cache rsync openssh-client
    - eval $(ssh-agent -s)
    - echo "$DIDATA_DEPLOYER_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - 'echo "Current directory: $PWD"'
    - ls -la
    - |
      if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]; then
        echo "This is a merge request. Skipping actual deployment, but running checks..."
        exit 0
      fi

    # Determine environment based on branch
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        DEPLOY_DIR="/var/web_server/htdocs/didata"
        COMPOSE_PROJECT_NAME="didata_production"
        BACKEND_PORT=8000
        REACT_APP_API_URL=https://edu01.citg.tudelft.nl/api
      elif [ "$CI_COMMIT_BRANCH" == "draft" ]; then
        DEPLOY_DIR="/var/web_server/htdocs/draft"
        COMPOSE_PROJECT_NAME="didata_draft"
        BACKEND_PORT=8001
        REACT_APP_API_URL=https://edu01.citg.tudelft.nl/api
      fi

    # Test SSH connection
    - echo "Testing SSH connection..."
    - ssh -v $DIDATA_SERVER_USER@$DIDATA_SERVER_ADDRESS "echo 'SSH connection successful'"
    - echo "SSH test completed. Proceeding with rsync..."

    # Rsync to the appropriate directory based on branch
    - 'rsync -avz --delete-after --exclude=".git/" --exclude=".cache/" --exclude="venv/" --exclude="frontend/node_modules/" --exclude=".env" . $DIDATA_SERVER_USER@$DIDATA_SERVER_ADDRESS:/tmp/didata_update/'

    # SSH and deploy to the correct directory and Docker container
    - |
      ssh $DIDATA_SERVER_USER@$DIDATA_SERVER_ADDRESS "
        sudo rsync -avz /tmp/didata_update/ $DEPLOY_DIR/ &&
        sudo chown -R root:root $DEPLOY_DIR &&
        sudo rm -rf /tmp/didata_update &&
        sudo chmod 755 $DEPLOY_DIR &&
        sudo chmod 600 $DEPLOY_DIR/.env &&  # Ensure this stays in the script, NOT in the .env file
        sudo chmod +x $DEPLOY_DIR/build_and_deploy.sh &&
        cd $DEPLOY_DIR &&
        export COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME &&
        export BACKEND_PORT=$BACKEND_PORT &&
        export REACT_APP_API_URL=$REACT_APP_API_URL &&
        sudo -E docker-compose --env-file .env build &&
        sudo -E docker-compose --env-file .env up -d &&
        echo 'Checking nginx html directory contents:' &&
        sudo -E docker exec ${COMPOSE_PROJECT_NAME}-nginx-1 ls -R /usr/share/nginx/html
        echo 'Checking environment variables...' &&
        sudo -E docker-compose exec -T backend env &&
        echo 'Checking Django secret key...' &&
        sudo -E docker-compose exec -T backend sh -c 'export DJANGO_SETTINGS_MODULE=config.settings && python -c \"from django.conf import settings; print(f\\\"Django secret key: {settings.SECRET_KEY}\\\")\"' &&
        echo 'Running migrations...' &&
        sudo -E docker-compose exec -T backend python manage.py migrate
      "

  environment:
    name: production
    url: https://edu01.citg.tudelft.nl/

cleanup:
  stage: cleanup
  image: docker:latest
  script:
    - docker system prune -a --volumes -f
  when: manual
  tags:
    - deploy
