image: python:3.9

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  WEBHOOK_URL: "https://mude.citg.tudelft.nl/hooks"
  WEBHOOK_TOKEN: "glpat-Lohnt8MN6nWzpcwyhprL"

cache:
  paths:
    - .pip-cache/

stages:
  - setup
  - deploy
  - process
  - verify

.install_dependencies:
  before_script:
    - apt-get update && apt-get install -y curl
    - pip install jupytext nbconvert

setup:
  stage: setup
  extends: .install_dependencies
  script:
    - echo "Dependencies installed successfully"
  artifacts:
    paths:
      - .pip-cache/

.deploy_template:
  extends: .install_dependencies
  stage: deploy
  script:
    - echo "Deploying files from src directory"

deploy-draft-students:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students-draft" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/students/**/*
      when: always

deploy-teachers:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-teachers" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/teachers/**/*
      when: always

deploy-production-students:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "release"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
      changes:
        - src/students/**/*
      when: always

process_notebooks:
  stage: process
  extends: .install_dependencies
  script:
    - |
      for notebook in $(find ./src -name "*.ipynb"); do
        # Create parallel directory structure
        parallel_dir=$(echo $notebook | sed 's/src/clean/')
        mkdir -p $(dirname $parallel_dir)
        
        # Copy original notebook
        cp $notebook $parallel_dir
        
        # Strip outputs
        jupyter nbconvert --ClearOutputPreprocessor.enabled=True --to notebook --inplace $parallel_dir
        
        # Create Markdown version
        jupytext --to md $parallel_dir
        
        # Create Python version
        jupytext --to py:percent $parallel_dir
      done
  artifacts:
    paths:
      - clean/

verify_files:
  stage: verify
  extends: .install_dependencies
  script:
    - |
      echo "Checking Markdown and code-only files..."
      for notebook in $(find ./clean -name "*.ipynb"); do
        md_file="${notebook%.ipynb}.md"
        py_file="${notebook%.ipynb}.py"
        
        if [ ! -f "$md_file" ]; then
          echo "ERROR: Markdown file not found for $notebook"
          exit 1
        fi
        
        if [ ! -f "$py_file" ]; then
          echo "ERROR: Python file not found for $notebook"
          exit 1
        fi
        
        echo "Checking content of $md_file"
        if ! grep -q "# " "$md_file"; then
          echo "WARNING: $md_file might be empty or not contain proper Markdown headers"
        fi
        
        echo "Checking content of $py_file"
        if ! grep -q "# %%" "$py_file"; then
          echo "WARNING: $py_file might not contain proper cell separators"
        fi
      done
      
      echo "All files checked successfully"
  dependencies:
    - process_notebooks