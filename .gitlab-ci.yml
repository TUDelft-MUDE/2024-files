image: python:3.9

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  WEBHOOK_URL: "https://mude.citg.tudelft.nl/hooks"
  WEBHOOK_TOKEN: "glpat-Lohnt8MN6nWzpcwyhprL"

cache:
  paths:
    - .pip-cache/

stages:
  - setup
  - process
  - deploy

setup:
  stage: setup
  script:
    - apk add --no-cache curl
    - pip install jupytext nbconvert
  artifacts:
    paths:
      - .pip-cache/

process_notebooks:
  stage: process
  script:
    - |
      for notebook in $(find ./src -name "*.ipynb"); do
        # Create parallel directory structure
        parallel_dir=$(echo $notebook | sed 's/src/clean/')
        mkdir -p $(dirname $parallel_dir)
        
        # Copy original notebook
        cp $notebook $parallel_dir
        
        # Strip outputs
        jupyter nbconvert --ClearOutputPreprocessor.enabled=True --to notebook --inplace $parallel_dir
        
        # Create Markdown version
        jupytext --to md $parallel_dir
        
        # Create Python version
        jupytext --to py:percent $parallel_dir
      done
  artifacts:
    paths:
      - clean/

create_sync_script:
  stage: process
  script:
    - |
      cat << EOF > sync_notebooks.py
      import os
      import sys
      import jupytext
      from nbformat import read, write, NO_CONVERT
      
      def sync_notebooks(source_dir, clean_dir):
          for root, _, files in os.walk(source_dir):
              for file in files:
                  if file.endswith('.ipynb'):
                      source_path = os.path.join(root, file)
                      clean_path = source_path.replace(source_dir, clean_dir)
                      md_path = clean_path.replace('.ipynb', '.md')
                      py_path = clean_path.replace('.ipynb', '.py')
                      
                      # Sync logic here (as before)
      
      if __name__ == "__main__":
          sync_notebooks("./src", "./clean")
      EOF
  artifacts:
    paths:
      - sync_notebooks.py

deploy-draft-students:
  stage: deploy
  script:
    - python sync_notebooks.py
    - |
      if [ -n "$(find . -name '*.conflicts')" ]; then
        echo "Conflicts detected. Please review the .conflicts files."
        exit 1
      fi
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students-draft" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/students/**/*
      when: always

deploy-teachers:
  stage: deploy
  script:
    - python sync_notebooks.py
    - |
      if [ -n "$(find . -name '*.conflicts')" ]; then
        echo "Conflicts detected. Please review the .conflicts files."
        exit 1
      fi
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-teachers" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/teachers/**/*
      when: always

deploy-production-students:
  stage: deploy
  script:
    - python sync_notebooks.py
    - |
      if [ -n "$(find . -name '*.conflicts')" ]; then
        echo "Conflicts detected. Please review the .conflicts files."
        exit 1
      fi
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "release"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
      changes:
        - src/students/**/*
      when: always