image: python:3.9

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  WEBHOOK_URL: "https://mude.citg.tudelft.nl/hooks"
  WEBHOOK_TOKEN: "glpat-Lohnt8MN6nWzpcwyhprL"
  SYNC_SCRIPT_PATH: "/var/web_server/sync_notebooks.py"  # Update this to the actual path on your webserver

cache:
  paths:
    - .pip-cache/

stages:
  - setup
  - process
  - sync
  - deploy

.install_dependencies:
  before_script:
    - apt-get update && apt-get install -y curl
    - pip install jupytext nbconvert

setup:
  stage: setup
  extends: .install_dependencies
  script:
    - echo "Dependencies installed successfully"
  artifacts:
    paths:
      - .pip-cache/

process_notebooks:
  stage: process
  extends: .install_dependencies
  script:
    - |
      for notebook in $(find ./src -name "*.ipynb"); do
        # 1. Copy file to a parallel folder
        clean_notebook=$(echo $notebook | sed 's/src/clean/')
        mkdir -p $(dirname $clean_notebook)
        cp $notebook $clean_notebook
        
        # 2. Strip cell outputs
        jupyter nbconvert --ClearOutputPreprocessor.enabled=True --to notebook --inplace $clean_notebook
        
        # 3. Create a markdown-only .md file
        jupytext --to md $clean_notebook
        
        # 4. Create a code-only .py file
        jupytext --to py:percent $clean_notebook
      done
  artifacts:
    paths:
      - clean/

sync_notebooks:
  stage: sync
  extends: .install_dependencies
  script:
    - echo "Executing sync script at ${SYNC_SCRIPT_PATH}"
    - ls -l ${SYNC_SCRIPT_PATH}  # This will help verify the file exists and has correct permissions
    - python ${SYNC_SCRIPT_PATH} ./src ./clean
    - |
      if [ -n "$(find . -name '*.conflicts')" ]; then
        echo "Conflicts detected. Please review the .conflicts files."
        exit 1
      fi
  artifacts:
    paths:
      - src/
      - clean/
      - "**/*.conflicts"
    when: always

.deploy_template:
  extends: .install_dependencies
  stage: deploy
  script:
    - echo "Deploying files from src directory"

deploy-draft-students:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students-draft" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/students/**/*
      when: always

deploy-teachers:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-teachers" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "main"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - src/teachers/**/*
      when: always

deploy-production-students:
  extends: .deploy_template
  script:
    - !reference [.deploy_template, script]
    - |
      curl -X POST "${WEBHOOK_URL}/files-sync-students" \
        -H "Content-Type: application/json" \
        -H "X-Gitlab-Token: ${WEBHOOK_TOKEN}" \
        -d '{
          "object_kind": "pipeline",
          "object_attributes": {
            "status": "success",
            "ref": "release"
          }
        }'
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
      changes:
        - src/students/**/*
      when: always